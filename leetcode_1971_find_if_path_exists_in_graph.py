# -*- coding: utf-8 -*-
"""Leetcode 1971 Find if Path Exists in Graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F1psikMVg3X4QBbUL2F52dtKv-f2z3yk
"""

from collections import defaultdict, deque
class Solution:
    def validPath(self, n, edges, start, end):
        graph = defaultdict(list)
        for e in edges:
            graph[e[0]].append(e[1])
            graph[e[1]].append(e[0])
        
        visited = set()
        stack = deque()
        stack.append(start)
        while stack:
            currNode = stack.pop()
            visited.add(currNode)
            for neighbor in graph[currNode]:
                if neighbor not in visited:
                    stack.append(neighbor)
        
        return True if end in visited else False

s = Solution()

print(f'Output: {s.validPath(n = 3, edges = [[0,1],[1,2],[2,0]], start = 0, end = 2)}')

print(f'Output: {s.validPath(n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], start = 0, end = 5)}')

