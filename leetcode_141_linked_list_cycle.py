# -*- coding: utf-8 -*-
"""Leetcode 141 Linked List Cycle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bp6A1KY-l6ypirLmUfTNMjp7crA_uctf
"""

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head):
        if head is None:
            return False
        #sp - slow pointer
        sp = head
        #fp - fast pointer
        fp = head.next
        while sp!=fp:
            if fp is None or fp.next is None:
                return False
            sp = sp.next
            fp = fp.next.next
        return True