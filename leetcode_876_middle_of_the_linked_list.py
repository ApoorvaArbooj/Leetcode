# -*- coding: utf-8 -*-
"""Leetcode 876 Middle of the Linked List.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SieisrfE6zOg61r8Uj6QJcG7Pq8zp-RF
"""

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def middleNode(self, head):
        slow_pointer = fast_pointer = head
        while fast_pointer and fast_pointer.next:
            slow_pointer = slow_pointer.next
            fast_pointer = fast_pointer.next.next
        return slow_pointer

node7 = ListNode(7)
node6 = ListNode(6)
node6.next = node7
node5 = ListNode(5)
node5.next = node6
node4 = ListNode(4)
node4.next = node5
node3 = ListNode(3)
node3.next = node4
node2 = ListNode(2)
node2.next = node3
node1 = ListNode(1)
node1.next = node2

llist = node1
while llist:
    print(llist.val)
    llist = llist.next

s=Solution()

middle = s.middleNode(node1)

llist = middle
while llist:
    print(llist.val)
    llist = llist.next

