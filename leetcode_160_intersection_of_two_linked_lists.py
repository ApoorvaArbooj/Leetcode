# -*- coding: utf-8 -*-
"""Leetcode 160 Intersection of Two Linked Lists.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rzyz1JYMxkl1_tJqZPumNmRKg5MORqM3
"""

# Definition for singly-linked list.
class ListNode:
  def __init__(self, x):
    self.val = x
    self.next = None

class Solution:
  def getIntersectionNode(self, headA, headB):
    pointerA = headA
    pointerB = headB
    while pointerA != pointerB:
      if pointerA is None:
        pointerA = headB
      else:
        pointerA = pointerA.next
      if pointerB is None:
        pointerB = headA
      else:
        pointerB = pointerB.next
    return pointerA

c3 = ListNode(5)
c2 = ListNode(4)
c2.next = c3
c1 = ListNode(8)
c1.next = c2
a2 = ListNode(1)
a2.next = c1
a1 = ListNode(4)
a1.next = a2
b3 = ListNode(1)
b3.next = c1
b2 = ListNode(6)
b2.next = b3
b1 = ListNode(5)
b1.next = b2

a2 = ListNode(1)
a1 = ListNode(4)
a1.next = a2
b3 = ListNode(1)
b2 = ListNode(6)
b2.next = b3
b1 = ListNode(5)
b1.next = b2

s = Solution()

intersectionNode = s.getIntersectionNode(a1,b1)

print(f'The linklists intersected at: {intersectionNode.val if intersectionNode else "None"}')

