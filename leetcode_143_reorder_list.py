# -*- coding: utf-8 -*-
"""Leetcode 143 Reorder List.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_r3ZJDpFkuYNwOGxS4PDU2gWcrDqNqzr
"""

# Definition for singly-linked list.
class ListNode:
     def __init__(self, val=0, next=None):
         self.val = val
         self.next = next
class Solution:
    def reorderList(self, head):
        """
        Do not return anything, modify head in-place instead.
        """
        dummy_head = ListNode(0,head)

        # find the middle of linked list
        slow_pointer = fast_pointer = head
        while fast_pointer and fast_pointer.next:
            slow_pointer = slow_pointer.next
            fast_pointer = fast_pointer.next.next 
          
        # reverse the second part of the list
        prevNode, currNode = None, slow_pointer
        while currNode:
            currNode.next, prevNode, currNode = prevNode, currNode, currNode.next
        
        # merge two sorted linked lists
        head1, head2 = head, prevNode
        while head2.next:
            head1.next, head1 = head2, head1.next
            head2.next, head2 = head1, head2.next
            
        return dummy_head.next
    
    def reorderList1(self, head):
        dummy_head = ListNode(0,head)
        # divide the link list
        list_heads = self.middle_of_linklist(head)
        head = list_heads[0]
        # reverse the second half of the linklist
        reversed_list_head = self.reverse_linklist(list_heads[1])
        # merge the first and reversed second half
        while reversed_list_head.next:
            head.next, head = reversed_list_head, head.next
            reversed_list_head.next, reversed_list_head = head, reversed_list_head.next
        return dummy_head.next
    
    def middle_of_linklist(self, head):
        slow_pointer = fast_pointer = head
        end_of_first_half = None
        while fast_pointer and fast_pointer.next:
            end_of_first_half = slow_pointer
            slow_pointer = slow_pointer.next
            fast_pointer = fast_pointer.next.next
        return [head,slow_pointer]

    def reverse_linklist(self, head):
        prevNode,currNode = None,head
        while currNode:
            currNode.next, prevNode, currNode = prevNode, currNode, currNode.next
        return prevNode

node7 = ListNode(7)
node6 = ListNode(6)
node6.next = node7
node5 = ListNode(5)
node5.next = node6
node4 = ListNode(4)
node4.next = node5
node3 = ListNode(3)
node3.next = node4
node2 = ListNode(2)
node2.next = node3
node1 = ListNode(1)
node1.next = node2

llist = node1
while llist:
    print(llist.val)
    llist = llist.next

s = Solution()

result = s.reorderList1(node1)

llist = result
while llist:
    print(llist.val)
    llist = llist.next

