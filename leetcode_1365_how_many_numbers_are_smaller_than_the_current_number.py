# -*- coding: utf-8 -*-
"""Leetcode 1365 How Many Numbers Are Smaller Than the Current Number.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SNgrKBPKrRTECG-ErHrspvLp9RSAGlQa
"""

import time

class Solution:
    def smallerNumbersThanCurrent(self, nums):
      result = []
      #for every number in nums
      for n1 in nums:
        #Initialize the counter
        count_no = 0
        #Looping over every number in nums
        for n2 in nums:
          #If the numbers are not equal and if first_no (n1) > second_no (n2)
          if n1 != n2 and n1>n2:
            #Increment the counter
            count_no += 1
        #Append the counter when all the numbers are compared for a number (first loop)
        result.append(count_no)
      return result

    def smallerNumbersThanCurrent1(self, nums):
        result = dict()
        #Initialize the dictionary such that:
        #0 is the key and represents nums[0] or the first element in nums
        #{0:[],1:[],2:[],....,n:[]}
        #the values will be empty lists
        for i in range(len(nums)):
            result[i]=[]
          
        ans = []
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                #append 1 for every small number
                if nums[i]!=nums[j]:
                    if nums[i]>nums[j]:
                        result[i].append(1)
                    else:
                        result[j].append(1)
            #sum of all the 1's to know the count of smaller numbers than nums[i]
            ans.append(sum(result[i]))

            
        return(ans)

    def smallerNumbersThanCurrent2(self, nums):
        SortedNums = sorted(nums)
        return([SortedNums.index(n) for n in nums])
    
    def smallerNumbersThanCurrent3(self, nums):
        #Fastest according to Leetcode

        #Initialize a list with 0
        #if count[0] = 0 (0 is absent in nums)
        #if count[2] = 3 (there are 3 2s in nums)
        count = [0]*101;

        #list to return 
        res = []
        
        #Store the count/frequency of every number/element from nums in count
        #count[i] = frequency of i
        for i in range(len(nums)):
            count[nums[i]] += 1
        
        #Count of numbers smaller than 
        #count[1] = frequency of i + frequency of i-1
        for i in range(1,101):
            count[i] += count[i-1]
        
        #Add the answers from list count to the final list
        for i in range(len(nums)):
            if (nums[i] == 0):
                res.append(0);
            else:
                res.append(count[nums[i] - 1])
        
        return res

#Input: nums = [8,1,2,2,3]
#Output: [4,0,1,1,3]
#Explanation: 
#For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
#For nums[1]=1 does not exist any smaller number than it.
#For nums[2]=2 there exist one smaller number than it (1). 
#For nums[3]=2 there exist one smaller number than it (1). 
#For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).

s = Solution()

nums = [8,1,2,2,2,3]

start_time = time.time()
print(f'Output: {s.smallerNumbersThanCurrent(nums)}\nExecution time: {time.time()-start_time}')

print(f'Output: {s.smallerNumbersThanCurrent1(nums)}\nExecution time: {time.time()-start_time}')

print(f'Output: {s.smallerNumbersThanCurrent2(nums)}\nExecution time: {time.time()-start_time}')

print(f'Output: {s.smallerNumbersThanCurrent3(nums)}\nExecution time: {time.time()-start_time}')

