# -*- coding: utf-8 -*-
"""Leetcode 206 Reverse Linked List.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XyUMTBhl0FlDx47jDn2ErmB8OyB0aFOl
"""

# Definition for singly-linked list.
class ListNode:
  def __init__(self, val=0, next=None):
    self.val = val
    self.next = next

class Solution:
    def reverseList(self, head):
        prevNode = None
        currNode = head
        nextNode = None
        while currNode is not None:
            nextNode = currNode.next
            currNode.next = prevNode
            prevNode = currNode
            currNode = nextNode
        return prevNode
    
    def reverseList_secondsolution(self,head):
        prev, curr = None, head
        while curr:
            curr.next, prev, curr = prev, curr, curr.next
        return prev

l4 = ListNode(9)
l3 = ListNode(1)
l3.next = l4
l2 = ListNode(5)
l2.next = l3
head = ListNode(4)
head.next = l2

ll = head
while ll:
  print(ll.val)
  ll = ll.next

s = Solution()

newHead = s.reverseList_secondsolution(head)

ll = newHead
while ll:
  print(ll.val)
  ll = ll.next

