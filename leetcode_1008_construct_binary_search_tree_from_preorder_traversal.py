# -*- coding: utf-8 -*-
"""Leetcode 1008 Construct Binary Search Tree from Preorder Traversal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12B6kQuXdQGIbzsfBNEzbJAR6otPZecyz
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:
        root = None
        for n in preorder:
            root = self.insertInBST(root,TreeNode(n))
        return root
            
    def insertInBST(self,root,node):
        if not root:
            return node
        if root.val < node.val:
            root.right = self.insertInBST(root.right,node)
        if root.val > node.val:
            root.left = self.insertInBST(root.left,node)
        return root