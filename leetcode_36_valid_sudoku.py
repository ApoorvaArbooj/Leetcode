# -*- coding: utf-8 -*-
"""Leetcode 36 Valid Sudoku.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G_IVVaEo0wPynpa9Fx7xOyyRQ9QEm6WN
"""

class Solution:
    def isValidSudoku(self, board):
        result = True
        for i in range(9):
            for j in range(9):
                if board[i][j] != '.':
                    if not self.isValid(board,i,j,board[i][j]):
                        result = False
                        break
        return result
                   
        
    def isValid(self, board, row, col, digit):
        #Column
        for r in range(9):
            if r!=row and board[r][col] == digit:
                return False
        #Row
        for c in range(9):
            if c!=col and board[row][c] == digit:
                return False
        #Box
        row_start_index = (row//3)*3
        col_start_index = (col//3)*3
        for i in range(3):
            for j in range(3):
                if (row_start_index+i)!= row and (col_start_index+j)!= col and board[row_start_index+i][col_start_index+j] == digit:
                    return False
        return True

class Solution2:
    def isValidSudoku(self, board):
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        boxs = [set() for _ in range(9)]
        for r in range(9):
            for c in range(9):
                digit = board[r][c]
                if digit != '.':
                    if digit in rows[r]:
                        return False
                    rows[r].add(digit)
                    if digit in cols[c]:
                        return False
                    cols[c].add(digit)
                    bx_indx = (r//3)*3+(c//3)
                    if digit in boxs[bx_indx]:
                        return False
                    boxs[bx_indx].add(digit)
        return True

input_board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
output_Expected = [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]

s=Solution2()

print(f'Output:{s.isValidSudoku(board=input_board)}')

