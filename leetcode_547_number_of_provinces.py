# -*- coding: utf-8 -*-
"""Leetcode 547 Number of Provinces.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XgHxUpmwQjEmgVn66zQjnB-Omd6WFogf
"""

from collections import deque
class Solution:
    def findCircleNum(self, isConnected):
        noOfProvinces = 0
        visited = set()
        for city in range(len(isConnected)):
            if city in visited:
                continue
            noOfProvinces += 1
            self.dfs(isConnected,city,visited)
        return noOfProvinces
    
    def dfs(self, graph, currCity,visited):
        stack = deque()
        stack.append(currCity)
        while len(stack)>0:
            currentCity = stack.pop()
            if currentCity in visited:
                continue
            visited.add(currentCity)
            for neighbor,edgeVal in enumerate(graph[currentCity]):
                if edgeVal == 1 and neighbor not in visited:
                    stack.append(neighbor)

s = Solution()

print(f'Output:{s.findCircleNum(isConnected = [[1,1,0],[1,1,0],[0,0,1]])}')

